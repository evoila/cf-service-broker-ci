#!/bin/bash

set -u

exec 3>&1 # make stdout available as fd 3 for the result

export ETCDCTL_API=2

export RES="/opt/resource"

DESTINATION_DIR="$1"
INPUT="$(cat)"

TMPDIR=${TMPDIR:-/tmp}

payload=$(mktemp "$TMPDIR/debug.XXXXXX")

echo "$INPUT" > $payload

cd $DESTINATION_DIR


getParameter() {
  echo "$INPUT" | jq --raw-output $1
}

getParameterExt() {
  echo "$1" | jq --raw-output $2
}


# from source
if [ "$(getParameter ".source.debug")" == "true" ]; then
  set -x
  exec 1>&2 
else
   exec 1> /dev/null
fi
ETCD_PATH_PREFIX=`getParameter ".source.pathPrefix"`
export ETCD_SERVER=`getParameter ".source.server"`
ETCD_SET=`getParameter ".params.set"`
ETCD_GET=`getParameter ".params.get"`
ETCD_DELETE=`getParameter ".params.delete"`


if [[ "$ETCD_GET" != null ]]; then
  jq -r --arg "prefix" "$ETCD_PATH_PREFIX" '("#!/bin/bash"),("set -e"),(.[]|(if (.path|startswith("/")) then "\(.path)" else "\($prefix)\(.path)" end) as $path | (.value?/"*") as $value | "etcdctl --endpoints \"$ETCD_SERVER\" get \"\($path)\" | grep -q \"\($value)\" || { echo \"wait on key(\($path))  with value (\($value))\"; until etcdctl --endpoints \"$ETCD_SERVER\" watch \"\($path)\" | grep -q "\($value)\"; do echo \"wait on key(\($path))  with value (\($value))\" "; done }")'  <<<"$ETCD_GET" >/tmp/get
  chmod ugo+x /tmp/get
  /tmp/get 2>/dev/null
fi

if [[ "$ETCD_SET" != null ]]; then
  jq -r --arg "prefix" "$ETCD_PATH_PREFIX" '("#!/bin/bash"),("set -e"),(.[]|(if (.path|startswith("/")) then "\(.path)" else "\($prefix)\(.path)" end) as $path | "etcdctl --endpoints \"$ETCD_SERVER\" put  \"\($path)\" \"\(.value)\"")'  <<<"$ETCD_SET" >/tmp/set
  chmod ugo+x /tmp/set 2>/dev/null
  /tmp/set
fi

if [[ "$ETCD_DELETE" != null ]]; then
  jq -r --arg "prefix" "$ETCD_PATH_PREFIX" '("#!/bin/bash"),("set -e"),(.[]|(if (.|startswith("/")) then "\(.)" else "\($prefix)\(.)" end) as $path | "etcdctl --endpoints \"$ETCD_SERVER\" rm  \"\($path)\"")'  <<<"$ETCD_DELETE" >/tmp/delete
  chmod ugo+x /tmp/delete
  /tmp/delete 2>/dev/null
fi

jq -n "{
  version: {version: \"1\"}
}" >&3
