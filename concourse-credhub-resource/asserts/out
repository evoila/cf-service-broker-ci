#!/bin/bash

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result

export RES="/opt/resource"

DESTINATION_DIR="$1"
INPUT="$(cat)"

TMPDIR=${TMPDIR:-/tmp}

payload=$(mktemp "$TMPDIR/cf-cli-resource-request.XXXXXX")

cat > $payload <&0

cd $DESTINATION_DIR


getParameter() {
  echo "$INPUT" | jq --raw-output $1
}

getParameterExt() {
  echo "$1" | jq --raw-output $2
}


# from source
PRIV_REPOS=`getParameter ".source.privateRepos"`
EXCLUDE_DIR=`getParameter ".source.cache.excludeCache"`
PARAM_VERSION="$(getParameter .params.version)"
POM="$(getParameter .params.pom.file)"
SCRIPT="$(getParameter .params.script)"
GLOB_VERSION="$(getParameter .version.version)"
CACHE_LOCALPATH="$(getParameter .source.cache.localPath)"
DEBUG_LEVEL=0;
[[ "$(getParameter .source.debugLevel)" != null ]] && DEBUG_LEVEL=$(getParameter .source.debugLevel)
[[ "$(getParameter .params.debugLevel)" != null ]] && DEBUG_LEVEL=$(getParameter .params.debugLevel) 
VERSIONE=

[ "$DEBUG_LEVEL" -ge 8 ] && exec 1>&2 || exec 1> /dev/null         # redirect all output to stderr for logging
[ "$DEBUG_LEVEL" -ge 9 ] && echo $INPUT


[[ "$POM" == null ]] &&  echo "[ERROR] .params.pom.file must be set" 1>&2 && exit 1
[[ "$SCRIPT" == null ]] &&  echo "[ERROR] .params.script must be set" 1>&2 && exit 1


declare -gA PARAMS
declare -gA PRIVATE_REPO
declare -gA VERSION
if [[ "$PRIV_REPOS" != null ]]; then 
SERVER=`echo -e  "<settings>\n\t<servers>\n"`
while IFS= read -r url &&
      IFS= read -r id &&
      IFS= read -r username &&
      IFS= read -r password; do
     ID=$id
     ID_URL="$ID""_url"
     ID_PASSWORD="$ID""_PASSWORD"
     ID_USERNAME="$ID""_USERNAME"
     PRIVATE_REPO["$ID_URL"]=$url
     PRIVATE_REPO["$ID_PASSWORD"]=$password
     PRIVATE_REPO["$ID_USERNAME"]=$username
SERVER=`echo -e  "$SERVER\n\t\t<server>\n\t\t\t<id>${ID}</id>\n\t\t\t<username>${PRIVATE_REPO["$ID_USERNAME"]}</username>\n\t\t\t<password>${PRIVATE_REPO["$ID_PASSWORD"]}</password>\n\t\t</server>\n"`
done < <(echo "$INPUT" | jq -r '.source.privateRepos[] | (.repo.url, .repo.id, .repo.username, .repo.password)')

  SERVER=`echo -e "$SERVER\t</servers>\n</settings>"`
  echo "$SERVER" > ~/.m2/settings.xml
fi


if [[ "$(getParameter .source.pom.add)" != null ]]; then
  while IFS= read -r key &&
        IFS= read -r value; do
  if [ "$key" == "file" ]; then
    value="$(tr -d "\0" <<<"$value")"
    filename=$(basename "$value")
    extension="${filename##*.}"
    [ "$extension" == "yml" ] && python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' < "$value" | $RES/addJsonXML.sh "$POM"
    [ "$extension" == "json" ] && cat "$value" | $RES/addJsonXML.sh "$POM"
  elif [ "$key" == "config" ]; then
    echo "$value" | addJsonXML.sh "$POM"
  else
    if [ -f "$value" ]; then
      key="$(tr -d "\0" <<<"$key")"
      filename=$(basename "$value")
      extension="${filename##*.}"
      [ "$extension" == "yml" ] && python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' < "$value" | $RES/addJsonXML.sh "$key"
      [ "$extension" == "json" ] && cat "$value" | $RES/addJsonXML.sh "$key"

    elif jq .  2>&1 1>/dev/null <<<"$value"; then
      echo "$value" | addJsonXML.sh "$key"
    fi
  fi
done < <(echo  "$INPUT"  | jq  -c -r  '.source.pom.add[] |keys[] as $k |  ($k, .[$k] | .)')
fi 

if [[ "$(getParameter .params.pom.add)" != null ]]; then
  while IFS= read -r key &&
        IFS= read -r value; do
   if [ "$key" == "file" ]; then
    value="$(tr -d "\0" <<<"$value")"
    filename=$(basename "$value")
    extension="${filename##*.}"
    [ "$extension" == "yml" ] && python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' < "$value" | $RES/addJsonXML.sh "$POM"
    [ "$extension" == "json" ] && cat "$value" | $RES/addJsonXML.sh "$POM"
  elif [ "$key" == "config" ]; then
    echo "$value" | addJsonXML.sh "$POM"
  else
    if [ -f "$value" ]; then
      key="$(tr -d "\0" <<<"$key")"
      filename=$(basename "$value")
      extension="${filename##*.}"
      [ "$extension" == "yml" ] && python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' < "$value" | $RES/addJsonXML.sh "$key"
      [ "$extension" == "json" ] && cat "$value" | $RES/addJsonXML.sh "$key"
    elif jq .  2>&1 1>/dev/null <<<"$value"; then
      echo "$value" | addJsonXML.sh "$key"
    fi
  fi
done < <(echo  "$INPUT"  | jq  -c -r  '.params.pom.add[] |keys[] as $k |  ($k, .[$k] | .)')
fi

if [[ "$(getParameter .source.params)" != null ]]; then
  while IFS= read -r name &&
        IFS= read -r value; do
        name="$(tr -d "\0" <<<"$name")"
	value="$(tr -d "\0" <<<"$value")"
        PARAMS["$name"]=$value
  done < <(echo "$INPUT" | jq -r '.source.params[] | keys[] as $k |  ($k, .[$k] | .)')
fi

if [[ "$(getParameter .params.params)" != null ]]; then
  while IFS= read -r name &&
      IFS= read -r value; do
      name="$(tr -d "\0" <<<"$name")"
      value="$(tr -d "\0" <<<"$value")"
      PARAMS["$name"]=$value
  done < <(echo "$INPUT" | jq -r '.params.params[] | keys[] as $k |  ($k, .[$k] | .)')
fi


if [[ "$(getParameter .params.versions)" != null ]]; then
  while IFS= read -r name &&
      IFS= read -r value; do
      if [[ -f "$value" ]]; then
        VERSION["$name"]=`cat $value`
      else
        VERSION["$name"]=$value
      fi
   done < <(echo "$INPUT" | jq -r '.params.versions[] | keys[] as $k |  ($k, .[$k] | .)')
fi

if [ "$(getParameter .source.versions)" != null ]; then 
  while IFS= read -r name &&
      IFS= read -r value; do
      PARAMS["$name"]=$value
      if [ -f "$value" ]; then
        VERSION["$name"]=`cat $value`
      else
        VERSION["$name"]=$value
      fi
   done < <(echo "$INPUT" | jq -r '.source.versions[] | keys[] as $k |  ($k, .[$k] | .)')
fi 
if [ "$PARAM_VERSION" != null ]; then
  if [ -f "$PARAM_VERSION" ]; then
    VERSION[main]=`cat $PARAM_VERSION`
  else
    VERSION[main]=$PARAM_VERSION
  fi
else
  VERSION[main]=`xmlstarlet sel -N my=http://maven.apache.org/POM/4.0.0 -t -v  '/my:project/my:version/text() | /my:project/my:parent/my:version/text()[not(/my:project/my:version)]' $POM`
fi

VERSIONE="${VERSION[main]}"

if [ "$(getParameter .source.cache)" != null ]; then
  if [[ -z $CACHE_LOCALPATH ]]; then
     echo "[ERROR] if cache using .source.cache.localPath must be set" 1>&2
     exit 1
  fi
  CACHE_LOCALPATH=${CACHE_LOCALPATH%/}
  CACHE_LOCALPATH=${CACHE_LOCALPATH#/}
  M2_LOCAL=$DESTINATION_DIR/$CACHE_LOCALPATH/M2_REPO/repository
  mkdir -p $M2_LOCAL
  sed -i "s#</settings>#<localRepository>$M2_LOCAL</localRepository>\\n</settings>#g" ~/.m2/settings.xml
  VERSIONE=`du -sb  $M2_LOCAL  | grep -o -e "^[0-9]*"`
fi



#--------------------------------------Run User Script-------------------------
source "$(echo $SCRIPT | tr -d '"')"
#------------------------------------------------------------------------------


if [[ $(getParameter .source.cache) != null ]] && [[ $(getParameter .params.updateCache) != null ]] ; then
  set +e 
  CACHE_USERNAME="$(getParameter .source.cache.username)"
  CACHE_PASSWORD="$(getParameter .source.cache.password)"
  CACHE_SERVER="$(getParameter .source.cache.server)"
  CACHE_PATH="$(getParameter .source.cache.path)"
  CACHE_FILE="$(getParameter .source.cache.file)"

  if [[ -z $CACHE_SERVER ]] || [[ -z $CACHE_PATH ]] || [[ -z $CACHE_FILE ]] || [[ -z $CACHE_USERNAME ]] || [[ -z $CACHE_PASSWORD ]]; then
     echo "[ERROR] if cache using .source.cache.username, .source.cache.password, .source.cache.server, .source.cache.path, .source.cache.file must be set" 1>&2
     exit 3;
  fi

  CACHE_SERVER=${CACHE_SERVER%/}
  CACHE_PATH=${CACHE_PATH#/}
  CACHE_PATH=${CACHE_PATH%/}
  CACHE_FILE=${CACHE_FILE#/}

  cd $M2_LOCAL
  
   EXCLUDE=
  if [[ "$EXCLUDE_DIR" != null ]]; then
    tmpdir=`mktemp -d`
    while IFS= read -r exclude ;do
      exclude="${exclude/.//}"
      exclude=${exclude%/}
      exclude=${exclude#/}
      [ -d $exclude ] && mkdir -p $tmpdir/$exclude && mv $exclude $tmpdir/$exclude/*
    done < <(echo "$INPUT" | jq -r '.source.cache.excludeCache[]')
  fi


  SPACE=`curl -u "$CACHE_USERNAME:$CACHE_PASSWORD" "$CACHE_SERVER/$CACHE_PATH/$CACHE_FILE.space"`
  if [ "$SPACE" != "$VERSIONE" ]; then
     [[ "$CACHE_USERNAME" != null ]] && curl -u "$CACHE_USERNAME:$CACHE_PASSWORD" --output "$CACHE_FILE" "$CACHE_SERVER/$CACHE_PATH/$CACHE_FILE" || curl --output "$CACHE_FILE" "$CACHE_SERVER/$CACHE_PATH/$CACHE_FILE"
    tar -xzf $CACHE_FILE -C $M2_LOCAL
    rm $CACHE_FILE
    VERSIONE=`du -sb  $M2_LOCAL  | grep -o -e "^[0-9]*"`
  fi

  VERSIONE=`du -sb  $M2_LOCAL  | grep -o -e "^[0-9]*"`

  if [ "$VERSIONE" != "$SPACE" ]; then
    tar -zcf  ../$CACHE_FILE . && cd .. 
    echo "$VERSIONE" > "${CACHE_FILE}.space" && curl --ftp-create-dirs -T "${CACHE_FILE}.space" -u "$CACHE_USERNAME:$CACHE_PASSWORD" "$CACHE_SERVER/$CACHE_PATH/${CACHE_FILE}.space"
    [[ "$CACHE_USERNAME" != null ]] && curl --ftp-create-dirs -T $CACHE_FILE -u "$CACHE_USERNAME:$CACHE_PASSWORD" "$CACHE_SERVER/$CACHE_PATH/$CACHE_FILE" || curl -T $CACHE_FILE  "$CACHE_SERVER/$CACHE_PATH/$CACHE_FILE"
    [[ ! -z $tmpdir ]] && mv $tmpdir/* $M2_LOCAL
  fi
  set -e
fi
jq -n "{
  version: {version: \"${VERSIONE}\"},
}" >&3
